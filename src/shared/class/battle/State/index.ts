import { Players } from "@rbxts/services";
import { AttackAction, ClashResult, ClashResultFate, Config, EntityStats, HexGridState, ReadinessIcon, Reality, StateState, TeamState, TILE_SIZE } from "shared/types/battle-types";
import { calculateRealityValue, getDummyStats, requestData } from "shared/utils";
import Entity from "../Entity";
import HexGrid from "../Hex/Grid";


export class Team {
    name: string;
    members: Entity[];

    constructor(name: string, members: Entity[]) {
        this.name = name;
        this.members = members;
    }

    push(...members: Entity[]) {
        for (const member of members) {
            if (!this.members.some((m) => m.stats.id === member.stats.id)) {
                this.members.push(member);
            }
        }
    }

    players() {
        return this.members.mapFiltered((entity) => Players.GetPlayerByUserId(entity.playerID));
    }

    sync(state: TeamState) {
        for (const entity of this.members) {
            const otherEntity = state.members.find((e) => e.playerID === entity.playerID);
            if (otherEntity) {
                entity.update(otherEntity);
            }
        }
    }
}

export default class State {
    teams: Team[] = [];
    grid: HexGrid;

    constructor({ width, worldCenter, height }: Config) {
        this.grid = new HexGrid({
            radius: math.floor(width / 2),
            center: new Vector2(worldCenter.X, worldCenter.Z),
            size: TILE_SIZE,
            name: "BattleGrid",
        });
    }

    //#region Syncronisation
    public teamInfo(): TeamState[] {
        return this.teams.map((team) => ({
            name: team.name,
            members: team.members.map((entity) => entity.info()),
        }));
    }

    public gridInfo() {
        return this.grid.info();
    }

    public info(): StateState {
        return {
            grid: this.gridInfo(),
            teams: this.teamInfo(),
        };
    }

    public syncGrid(grid: HexGridState) {
        this.grid.update(grid);
    }

    public syncTeams(teamStates: TeamState[]) {
        for (const state of teamStates) {
            const team = this.teams.find((t) => t.name === state.name);
            if (team) team.sync(state);
            else {
                warn(`Team [${state.name}] not found`);
                const newTeam = new Team(state.name, state.members.map((entity) => {
                    return new Entity(entity);
                }));
                this.teams.push(newTeam);
            }
        }
    }

    public sync(other: Partial<StateState>) {
        print(`Syncing state with`, other);

        // 1. Update grid
        if (other.grid) this.syncGrid(other.grid);

        // 2. Update teams
        if (other.teams) this.syncTeams(other.teams);
    }

    //#endregion

    //#region Initialisation
    /**
     * initialises the teams for the battle.
     *
     * @param teamMap - A record where the key is the team name and the value is an array of players belonging to that team.
     *
     * This method iterates over the provided team map, processes each player to create an `Entity` object, and then
     * groups these entities into `Team` objects which are added to the `teams` array.
     *
     * Each player is mapped to an `Entity` object by fetching their character stats and other relevant information.
     * If the character stats are not found, a warning is logged and the player is skipped.
     *
     * @remarks
     * - The `playerID` is generated by adding a random number to the player's `UserId`.
     * - If the player's `UserId` is 0, the entity is marked as an enemy bot.
     * - The `characterID` is currently hardcoded as 'entity_adalbrecht' for temporary purposes.
     */
    protected initialiseTeams(teamMap: Record<string, Player[]>) {
        for (const [teamName, playerList] of pairs(teamMap)) {
            const members = playerList
                .mapFiltered((player) => {
                    // const characterID = player.Character ? player.Character.Name : "default_character";
                    const characterID = 'entity_adalbrecht'; // temp
                    const characterStats = requestData(player, "characterStats", characterID) as EntityStats;
                    if (!characterStats) {
                        warn(`Character [${characterID}] not found for [${player.Name}]`);
                        return undefined;
                    }
                    return new Entity({
                        playerID: player.UserId,
                        stats: characterStats,
                        pos: 0,
                        org: 0,
                        hip: 0,
                        sta: 0,
                        name: player.Name,
                        team: teamName,
                    });
                })
                .filter((entity): entity is Entity => entity !== undefined);
            this.teams.push(new Team(teamName, members));
        }
    }

    private initialiseEntitiesPositions() {
        const allEntities = this.getAllEntities();
        const vacantCells = this.grid.cells.filter((cell) => cell.isVacant());

        if (vacantCells.size() < allEntities.size()) {
            warn("Not enough vacant cells to spawn all entities", vacantCells.size(), allEntities.size());
            return;
        }

        for (const entity of allEntities) {
            if (entity.cell) continue;

            const i = math.random(0, vacantCells.size() - 1)
            const randomCell = vacantCells[i];
            if (randomCell) {
                vacantCells.remove(i)
                entity.setCell(randomCell);
            }
        }
    }
    /**
     * Initializes various components of the battle state, including the grid, teams, entity positions, and (temporarily) testing dummies.
     *
     * @param teamMap - A record mapping team names to arrays of players.
     */
    public initialiseNumbers(teamMap: Record<string, Player[]>) {
        this.grid.initialise();
        this.initialiseTeams(teamMap);
        this.initialiseEntitiesPositions();
        this.initialiseTestingDummies(); // temp
    }

    private initialiseTestingDummies() {
        const dummy = new Entity({
            stats: getDummyStats(),
            playerID: -1,
            hip: 0,
            pos: 0,
            org: 999,
            sta: 999,
        })
        this.teams.push(new Team("Test", [dummy]));
        dummy.setCell(this.grid.cells.find((c) => c.isVacant())!);
    }
    //#endregion

    //#region Find Info
    public findEntity(playerID: number): Entity | undefined {
        return this.getAllEntities().find((entity) => entity.playerID === playerID);
    }

    public getAllEntities(): Entity[] {
        return this.teams.map((team) => team.members).reduce<Entity[]>((acc, val) => [...acc, ...val], []);
    }

    public getAllPlayers(): Player[] {
        return this.teams.map((team) => team.players()).reduce<Player[]>((acc, val) => [...acc, ...val], []);
    }
    //#endregion

    //#region Clash
    public applyClash(attackAction: AttackAction) {
        const clashResult = attackAction.clashResult;
        if (!clashResult) {
            warn("applyClash: Clash result not found");
            return;
        }
        print(`Clash Result: ${clashResult.fate} | Damage: ${clashResult.damage}`);
        attackAction.executed = true;
        attackAction.ability.target.damage(clashResult.damage);
    }

    public clash(attackAction: AttackAction): ClashResult {
        const { using: attacker, target, acc } = attackAction.ability;
        print(`Attacker: ${attacker.name} | Target: ${target.name} | Accuracy: ${acc}`);

        let fate: ClashResultFate = "Miss";
        let damage = 0;

        const hitRoll = math.random(1, 100);
        const hitChance = acc - calculateRealityValue(Reality.Maneuver, target);
        const critChance = calculateRealityValue(Reality.Precision, attacker);

        const abilityDamage = attackAction.ability.calculateDamage();
        const minDamage = abilityDamage * 0.5;
        const maxDamage = abilityDamage;

        if (hitRoll <= hitChance) {
            if (hitRoll <= hitChance * 0.1 + critChance) {
                damage = math.random((minDamage + maxDamage) / 2, maxDamage) * 2;
                fate = "CRIT";
            } else {
                damage = math.random(minDamage, maxDamage);
                fate = "Hit";
            }
        }

        damage = math.clamp(damage, 0, 1000);
        return { damage, u_damage: damage, fate, roll: hitRoll };
    }
    //#endregion

    //#region Readiness
    private calculateReadinessIncrement(entity: Entity) {
        return entity.stats.spd + math.random(-0.1, 0.1) * entity.stats.spd;
    }

    private iterateReadinessGauntlet(entities: Entity[]) {
        for (const entity of entities) {
            entity.change('pos', math.clamp(entity.get('pos') + this.calculateReadinessIncrement(entity), 0, 100));
        }
    }

    public runReadinessGauntlet() {
        const entities = this.getAllEntities();
        if (entities.size() === 0) {
            warn("Entity list is empty");
            return;
        }

        while (!entities.some((e) => e.get('pos') >= 100)) {
            this.iterateReadinessGauntlet(entities);
        }

        const winner = entities.sort((a, b) => a.get('pos') - b.get('pos') > 0)[0];
        return winner;
    }

    protected getReadinessIcons(): ReadinessIcon[] {
        return this.getAllEntities().map((entity) => ({
            playerID: entity.playerID,
            iconUrl: "rbxassetid://18915919565",
            readiness: entity.getState('pos')
        }));
    }
    //#endregion
}